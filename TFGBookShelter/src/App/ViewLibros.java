/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package App;

import java.sql.ResultSet;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalDate;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author ludimo16
 */
public class ViewLibros extends javax.swing.JPanel {
private Integer adminId;

    /**
     * Creates new form ViewLibros
     */
    public ViewLibros() {
        initComponents();
        Utility.refrescarTabla(tablaLibros, "SELECT * FROM libro");
        Utility.refrescarTabla(tablaPrestamos, "SELECT * FROM prestamos");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        infoPrestar = new javax.swing.JLabel();
        textUsuarioID = new javax.swing.JTextField();
        btnPrestar = new javax.swing.JButton();
        btnDevolver = new javax.swing.JButton();
        TextConsultaPrestamo = new javax.swing.JTextField();
        toggleBtnConsultarPrestamo = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaPrestamos = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaLibros = new javax.swing.JTable();
        btnAgregarLibro = new javax.swing.JButton();
        btnEliminarLibro = new javax.swing.JButton();
        textConsultaLibro = new javax.swing.JTextField();
        toggleBtnConsultaLibro = new javax.swing.JToggleButton();
        btnEmergenciaLibro = new javax.swing.JButton();
        infoLibros = new javax.swing.JLabel();
        fondoDePantalla = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        infoPrestar.setFont(new java.awt.Font("OCR A Extended", 0, 24)); // NOI18N
        infoPrestar.setText("Prestamos");
        add(infoPrestar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        textUsuarioID.setPreferredSize(new java.awt.Dimension(200, 50));
        add(textUsuarioID, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        btnPrestar.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        btnPrestar.setText("Prestar");
        btnPrestar.setPreferredSize(new java.awt.Dimension(200, 50));
        btnPrestar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrestarActionPerformed(evt);
            }
        });
        add(btnPrestar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        btnDevolver.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        btnDevolver.setText("Devolver");
        btnDevolver.setPreferredSize(new java.awt.Dimension(200, 50));
        btnDevolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDevolverActionPerformed(evt);
            }
        });
        add(btnDevolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, -1, -1));

        TextConsultaPrestamo.setMaximumSize(new java.awt.Dimension(200, 50));
        TextConsultaPrestamo.setMinimumSize(new java.awt.Dimension(200, 50));
        TextConsultaPrestamo.setPreferredSize(new java.awt.Dimension(200, 50));
        add(TextConsultaPrestamo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, -1, -1));

        toggleBtnConsultarPrestamo.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        toggleBtnConsultarPrestamo.setText("Consultar Usuario");
        toggleBtnConsultarPrestamo.setPreferredSize(new java.awt.Dimension(200, 50));
        toggleBtnConsultarPrestamo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleBtnConsultarPrestamoActionPerformed(evt);
            }
        });
        add(toggleBtnConsultarPrestamo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, -1, -1));

        tablaPrestamos.setFont(new java.awt.Font("OCR A Extended", 0, 12)); // NOI18N
        tablaPrestamos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Usuario", "Titulo", "Día Prestado", "Día Límite", "Exceso Días"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaPrestamos.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tablaPrestamos);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(232, 10, 1250, 400));

        jSeparator1.setBackground(new java.awt.Color(255, 0, 51));
        jSeparator1.setForeground(new java.awt.Color(255, 0, 0));
        add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 420, 220, 10));

        tablaLibros.setFont(new java.awt.Font("OCR A Extended", 0, 12)); // NOI18N
        tablaLibros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Título", "Autor", "Año", "ISBN", "Disponible", "Usuario Prestado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaLibros.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablaLibros);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(232, 427, 1250, 360));

        btnAgregarLibro.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        btnAgregarLibro.setText("Agregar Libro");
        btnAgregarLibro.setPreferredSize(new java.awt.Dimension(200, 50));
        btnAgregarLibro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarLibroActionPerformed(evt);
            }
        });
        add(btnAgregarLibro, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 480, -1, -1));

        btnEliminarLibro.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        btnEliminarLibro.setText("Borrar Libro");
        btnEliminarLibro.setPreferredSize(new java.awt.Dimension(200, 50));
        btnEliminarLibro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarLibroActionPerformed(evt);
            }
        });
        add(btnEliminarLibro, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 540, -1, -1));

        textConsultaLibro.setMaximumSize(new java.awt.Dimension(200, 50));
        textConsultaLibro.setMinimumSize(new java.awt.Dimension(200, 50));
        textConsultaLibro.setPreferredSize(new java.awt.Dimension(200, 50));
        add(textConsultaLibro, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 670, -1, -1));

        toggleBtnConsultaLibro.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        toggleBtnConsultaLibro.setText("Consulta Titulo");
        toggleBtnConsultaLibro.setPreferredSize(new java.awt.Dimension(200, 50));
        toggleBtnConsultaLibro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleBtnConsultaLibroActionPerformed(evt);
            }
        });
        add(toggleBtnConsultaLibro, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 730, -1, -1));

        btnEmergenciaLibro.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        btnEmergenciaLibro.setText("Eliminar libros");
        btnEmergenciaLibro.setPreferredSize(new java.awt.Dimension(200, 50));
        btnEmergenciaLibro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmergenciaLibroActionPerformed(evt);
            }
        });
        add(btnEmergenciaLibro, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 600, -1, -1));

        infoLibros.setFont(new java.awt.Font("OCR A Extended", 0, 24)); // NOI18N
        infoLibros.setText("Libros");
        add(infoLibros, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, -1, -1));

        fondoDePantalla.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/minimalist_books_image_1500x900.png"))); // NOI18N
        fondoDePantalla.setMaximumSize(new java.awt.Dimension(1500, 800));
        fondoDePantalla.setMinimumSize(new java.awt.Dimension(1500, 800));
        fondoDePantalla.setPreferredSize(new java.awt.Dimension(1500, 800));
        add(fondoDePantalla, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarLibroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarLibroActionPerformed
        String filePath = "C:\\Users\\ludimo16\\Desktop\\TFG\\MOCK_DATA.csv";
        LibroDAO libroDAO = new LibroDAO();
        libroDAO.cargarLibrosDesdeCSV(filePath, tablaLibros);
        Utility.registrarAccion("auditoria_administradores", "El administrador agregó un nuevo libro al sistema.", adminId);
    }//GEN-LAST:event_btnAgregarLibroActionPerformed

    private void btnEliminarLibroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarLibroActionPerformed
       String deleteQuery = "DELETE FROM libro WHERE id = ?";
       String refreshQuery = "SELECT * FROM libro";
       Utility.eliminarElementoSeleccionado(tablaLibros, "Libro", deleteQuery, refreshQuery);
       Utility.registrarAccion("auditoria_administradores", "El administrador eliminó un libro del sistema.", adminId);
    }//GEN-LAST:event_btnEliminarLibroActionPerformed

    private void btnEmergenciaLibroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmergenciaLibroActionPerformed
    // Confirmación antes de eliminar todos los libros
    int confirm = JOptionPane.showConfirmDialog(this, 
        "¿Estás seguro de que deseas eliminar todos los libros de la base de datos?", 
        "Confirmación de eliminación", 
        JOptionPane.YES_NO_OPTION, 
        JOptionPane.WARNING_MESSAGE);

    if (confirm == JOptionPane.YES_OPTION) {
        String deleteQuery = "DELETE FROM libro";
        String refreshQuery = "SELECT * FROM libro";

        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(deleteQuery)) {

            int rowsAffected = statement.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Todos los libros han sido eliminados exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No se encontraron libros para eliminar.", "Información", JOptionPane.INFORMATION_MESSAGE);
            }

            // Refresca la tabla después de la eliminación
            Utility.refrescarTabla(tablaLibros, refreshQuery);
            Utility.registrarAccion("auditoria_administradores", "El administrador realizó una acción de emergencia relacionada con un libro.", adminId);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al eliminar los libros.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_btnEmergenciaLibroActionPerformed

    private void toggleBtnConsultaLibroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleBtnConsultaLibroActionPerformed
        // Verifica si el botón está en estado "seleccionado" o no
    if (toggleBtnConsultaLibro.isSelected()) {
        String titulo = textConsultaLibro.getText().trim();

        if (titulo.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, introduce un título para consultar.", "Error", JOptionPane.ERROR_MESSAGE);
            toggleBtnConsultaLibro.setSelected(false); // Desmarcar el botón si no hay texto
            return;
        }

        String query = "SELECT * FROM libro WHERE titulo LIKE ?";
        
        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {

            statement.setString(1, "%" + titulo + "%");
            ResultSet resultSet = statement.executeQuery();

            // Preparar el modelo de la tabla
            DefaultTableModel model = (DefaultTableModel) tablaLibros.getModel();
            model.setRowCount(0); // Limpiar la tabla antes de mostrar los resultados

            int columnCount = resultSet.getMetaData().getColumnCount();
            while (resultSet.next()) {
                Object[] rowData = new Object[columnCount];
                for (int i = 0; i < columnCount; i++) {
                    rowData[i] = resultSet.getObject(i + 1);
                }
                model.addRow(rowData);
            }

            if (model.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "No se encontraron libros con el título especificado.", "Sin resultados", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al consultar el libro.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } else {
        // Si el botón está en estado "no seleccionado", restaura la vista completa
        String query = "SELECT * FROM libro";
        
        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(query);
             ResultSet resultSet = statement.executeQuery()) {

            DefaultTableModel model = (DefaultTableModel) tablaLibros.getModel();
            model.setRowCount(0); // Limpiar la tabla antes de mostrar todos los libros

            int columnCount = resultSet.getMetaData().getColumnCount();
            while (resultSet.next()) {
                Object[] rowData = new Object[columnCount];
                for (int i = 0; i < columnCount; i++) {
                    rowData[i] = resultSet.getObject(i + 1);
                }
                model.addRow(rowData);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar la lista completa de libros.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_toggleBtnConsultaLibroActionPerformed

    private void btnPrestarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrestarActionPerformed
     // Verificar que se haya seleccionado un libro
    int selectedRow = tablaLibros.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione un libro para prestar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Obtener el título del libro seleccionado y su ID
    int libroID = (int) tablaLibros.getValueAt(selectedRow, 0); // ID del libro, suponiendo que está en la columna 0
    String tituloLibro = (String) tablaLibros.getValueAt(selectedRow, 1);

    // Obtener el ID del usuario desde el TextField
    String usuario = textUsuarioID.getText().trim();
    if (usuario.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, ingrese el ID del usuario.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Calcular las fechas de préstamo y límite
    LocalDate diaPrestado = LocalDate.now();
    LocalDate diaLimite = diaPrestado.plusDays(14);

    Connection connection = null;

    try {
        connection = DatabaseConnection.getConnection();
        connection.setAutoCommit(false); // Iniciar la transacción

        // Paso 1: Registrar el préstamo en la tabla `prestamos`
        String prestamoQuery = "INSERT INTO prestamos (usuario, titulo, dia_prestado, dia_limite, exceso_dias) VALUES (?, ?, ?, ?, ?)";
        try (PreparedStatement prestamoStmt = connection.prepareStatement(prestamoQuery)) {
            prestamoStmt.setString(1, usuario);
            prestamoStmt.setString(2, tituloLibro);
            prestamoStmt.setDate(3, java.sql.Date.valueOf(diaPrestado));
            prestamoStmt.setDate(4, java.sql.Date.valueOf(diaLimite));
            prestamoStmt.setInt(5, 0); // Inicialmente, sin exceso de días

            prestamoStmt.executeUpdate();
        }

        // Paso 2: Actualizar el estado del libro en la tabla `libro`
        String libroQuery = "UPDATE libro SET disponible = ?, usuario_prestado = ? WHERE id = ?";
        try (PreparedStatement libroStmt = connection.prepareStatement(libroQuery)) {
            libroStmt.setBoolean(1, false); // Marcar como no disponible
            libroStmt.setString(2, usuario); // Registrar el ID del usuario
            libroStmt.setInt(3, libroID); // Especificar el ID del libro

            libroStmt.executeUpdate();
        }

        // Confirmar la transacción
        connection.commit();

        JOptionPane.showMessageDialog(this, "Préstamo registrado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        Utility.registrarAccion("auditoria_administradores", "El administrador registró el préstamo de un libro.", adminId);

        // Actualizar ambas tablas para reflejar los cambios
        Utility.refrescarTabla(tablaPrestamos, "SELECT * FROM prestamos");
        Utility.refrescarTabla(tablaLibros, "SELECT * FROM libro");

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al registrar el préstamo.", "Error", JOptionPane.ERROR_MESSAGE);
        try {
            if (connection != null) {
                connection.rollback(); // Revertir cambios en caso de error
            }
        } catch (SQLException rollbackEx) {
            rollbackEx.printStackTrace();
        }
    } finally {
        try {
            if (connection != null) {
                connection.setAutoCommit(true); // Restaurar el modo de autocommit
                connection.close();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    }//GEN-LAST:event_btnPrestarActionPerformed

    private void btnDevolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDevolverActionPerformed
    // Verificar que se haya seleccionado un préstamo en TablaPrestamos
int selectedRow = tablaPrestamos.getSelectedRow();
if (selectedRow == -1) {
    JOptionPane.showMessageDialog(this, "Por favor, seleccione un préstamo para devolver.", "Advertencia", JOptionPane.WARNING_MESSAGE);
    return;
}

// Obtener el ID del préstamo seleccionado
int prestamoID = (int) tablaPrestamos.getValueAt(selectedRow, 0); // Suponiendo que la columna 0 es el ID del préstamo

// Confirmación de la devolución
int confirm = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas devolver este libro?", "Confirmar Devolución", JOptionPane.YES_NO_OPTION);
if (confirm != JOptionPane.YES_OPTION) {
    return; // Cancelar la devolución si el usuario selecciona "No"
}

Connection connection = null;

try {
    connection = DatabaseConnection.getConnection();
    connection.setAutoCommit(false); // Iniciar la transacción

    // Paso 1: Obtener el título del préstamo antes de eliminarlo
    String queryTitulo = "SELECT titulo FROM prestamos WHERE id = ?";
    String tituloLibro = null;
    try (PreparedStatement stmtTitulo = connection.prepareStatement(queryTitulo)) {
        stmtTitulo.setInt(1, prestamoID);
        try (ResultSet rs = stmtTitulo.executeQuery()) {
            if (rs.next()) {
                tituloLibro = rs.getString("titulo");
                System.out.println("Título del libro a devolver: " + tituloLibro);
            } else {
                throw new SQLException("No se encontró el título del préstamo con ID: " + prestamoID);
            }
        }
    }

    // Paso 2: Eliminar el préstamo de la tabla prestamos
    String eliminarPrestamoQuery = "DELETE FROM prestamos WHERE id = ?";
    try (PreparedStatement eliminarPrestamoStmt = connection.prepareStatement(eliminarPrestamoQuery)) {
        eliminarPrestamoStmt.setInt(1, prestamoID);
        eliminarPrestamoStmt.executeUpdate();
    }

    // Paso 3: Actualizar el estado del libro en la tabla libro basado en el título
    String actualizarLibroQuery = "UPDATE libro SET disponible = ?, usuario_prestado = NULL WHERE titulo = ?";
    try (PreparedStatement actualizarLibroStmt = connection.prepareStatement(actualizarLibroQuery)) {
        actualizarLibroStmt.setBoolean(1, true); // Marcar como disponible
        actualizarLibroStmt.setString(2, tituloLibro); // Usar el título del libro
        int rowsUpdated = actualizarLibroStmt.executeUpdate();
        if (rowsUpdated > 0) {
            Utility.registrarAccion("auditoria_administradores", "El administrador actualizó el estado del libro tras una devolución.", adminId);
            System.out.println("El estado del libro fue actualizado correctamente.");
        } else {
            System.out.println("No se actualizó ningún libro. Verifica si el título existe en la tabla libro.");
        }
    }

    connection.commit(); // Confirmar la transacción

    JOptionPane.showMessageDialog(this, "Préstamo devuelto exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

    // Actualizar las tablas para reflejar los cambios
    Utility.refrescarTabla(tablaPrestamos, "SELECT * FROM prestamos");
    Utility.refrescarTabla(tablaLibros, "SELECT * FROM libro");

} catch (SQLException e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Error al devolver el préstamo.", "Error", JOptionPane.ERROR_MESSAGE);
    try {
        if (connection != null) {
            connection.rollback(); // Revertir cambios en caso de error
        }
    } catch (SQLException rollbackEx) {
        rollbackEx.printStackTrace();
    }
} finally {
    try {
        if (connection != null) {
            connection.setAutoCommit(true); // Restaurar el modo de autocommit
            connection.close();
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
    }
}
    }//GEN-LAST:event_btnDevolverActionPerformed

    private void toggleBtnConsultarPrestamoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleBtnConsultarPrestamoActionPerformed
         // Obtener el estado del toggle button
    boolean isConsultar = toggleBtnConsultarPrestamo.isSelected();
    
    // Obtener el ID del usuario ingresado en el JTextField
    String usuarioID = TextConsultaPrestamo.getText().trim(); // Asegúrate de que el JTextField se llame txtUsuarioID o cámbialo si tiene otro nombre
    
    if (isConsultar) {
        // Verificar que se haya ingresado un ID de usuario
        if (usuarioID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese el ID del usuario para consultar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            toggleBtnConsultarPrestamo.setSelected(false); // Desactivar el toggle si falta el ID
            return;
        }

        // Consulta SQL para filtrar los préstamos por ID de usuario
        String query = "SELECT * FROM prestamos WHERE usuario = ?";
        
        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {
            
            statement.setString(1, usuarioID); // Establecer el ID de usuario en la consulta
            ResultSet resultSet = statement.executeQuery();

            // Refrescar la tabla con el resultado filtrado
            DefaultTableModel model = (DefaultTableModel) tablaPrestamos.getModel();
            model.setRowCount(0); // Limpiar la tabla

            int columnCount = resultSet.getMetaData().getColumnCount();
            while (resultSet.next()) {
                Object[] rowData = new Object[columnCount];
                for (int i = 0; i < columnCount; i++) {
                    rowData[i] = resultSet.getObject(i + 1);
                }
                model.addRow(rowData); // Añadir la fila filtrada al modelo de tabla
            }
            
            JOptionPane.showMessageDialog(this, "Consulta realizada.", "Información", JOptionPane.INFORMATION_MESSAGE);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al realizar la consulta.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        // Mostrar todos los registros cuando se desactiva el toggle
        Utility.refrescarTabla(tablaPrestamos, "SELECT * FROM prestamos");
    }
    }//GEN-LAST:event_toggleBtnConsultarPrestamoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField TextConsultaPrestamo;
    private javax.swing.JButton btnAgregarLibro;
    private javax.swing.JButton btnDevolver;
    private javax.swing.JButton btnEliminarLibro;
    private javax.swing.JButton btnEmergenciaLibro;
    private javax.swing.JButton btnPrestar;
    private javax.swing.JLabel fondoDePantalla;
    private javax.swing.JLabel infoLibros;
    private javax.swing.JLabel infoPrestar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tablaLibros;
    private javax.swing.JTable tablaPrestamos;
    private javax.swing.JTextField textConsultaLibro;
    private javax.swing.JTextField textUsuarioID;
    private javax.swing.JToggleButton toggleBtnConsultaLibro;
    private javax.swing.JToggleButton toggleBtnConsultarPrestamo;
    // End of variables declaration//GEN-END:variables
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package App;

import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author ludimo16
 */
public class ViewUsuarios extends javax.swing.JPanel {
private Integer adminId;
    /**
     * Creates new form ViewUsuarios
     */
    public ViewUsuarios() {
        initComponents();
        Utility.refrescarTabla(tablaUsuarios, "SELECT * FROM usuarios");
        Utility.refrescarTabla(tablaAdministradores, "SELECT * FROM administradores");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaUsuarios = new javax.swing.JTable();
        infoUsuarios = new javax.swing.JLabel();
        btnAgregarUsuario = new javax.swing.JButton();
        btnEliminarUsuario = new javax.swing.JButton();
        textConsultarUsuario = new javax.swing.JTextField();
        toggleBtnConsultarUsuario = new javax.swing.JToggleButton();
        infoAdministrador = new javax.swing.JLabel();
        btnAgregarAdministrador = new javax.swing.JButton();
        btnEliminarAdministrador = new javax.swing.JButton();
        textConsultarAdministrador = new javax.swing.JTextField();
        toggleBtnConsultarAdmistrador = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaAdministradores = new javax.swing.JTable();
        fondoDePantalla = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaUsuarios.setFont(new java.awt.Font("OCR A Extended", 0, 12)); // NOI18N
        tablaUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Permisos", "Nombre", "1ºApellido", "2ºApellido", "Domicilio", "Movil", "Usuario alias"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaUsuarios.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablaUsuarios);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(232, 7, 1260, 430));

        infoUsuarios.setFont(new java.awt.Font("OCR A Extended", 0, 24)); // NOI18N
        infoUsuarios.setText("Usuarios");
        add(infoUsuarios, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        btnAgregarUsuario.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        btnAgregarUsuario.setText("Agregar");
        btnAgregarUsuario.setPreferredSize(new java.awt.Dimension(200, 50));
        btnAgregarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarUsuarioActionPerformed(evt);
            }
        });
        add(btnAgregarUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        btnEliminarUsuario.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        btnEliminarUsuario.setText("Borrar");
        btnEliminarUsuario.setPreferredSize(new java.awt.Dimension(200, 50));
        btnEliminarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarUsuarioActionPerformed(evt);
            }
        });
        add(btnEliminarUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        textConsultarUsuario.setMaximumSize(new java.awt.Dimension(200, 50));
        textConsultarUsuario.setMinimumSize(new java.awt.Dimension(200, 50));
        textConsultarUsuario.setPreferredSize(new java.awt.Dimension(200, 50));
        add(textConsultarUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, -1, -1));

        toggleBtnConsultarUsuario.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        toggleBtnConsultarUsuario.setText("Consultar ID");
        toggleBtnConsultarUsuario.setMaximumSize(new java.awt.Dimension(150, 50));
        toggleBtnConsultarUsuario.setMinimumSize(new java.awt.Dimension(150, 50));
        toggleBtnConsultarUsuario.setPreferredSize(new java.awt.Dimension(200, 50));
        toggleBtnConsultarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleBtnConsultarUsuarioActionPerformed(evt);
            }
        });
        add(toggleBtnConsultarUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, -1, -1));

        infoAdministrador.setFont(new java.awt.Font("OCR A Extended", 0, 24)); // NOI18N
        infoAdministrador.setText("Administracion");
        add(infoAdministrador, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 460, -1, -1));

        btnAgregarAdministrador.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        btnAgregarAdministrador.setText("Agregar");
        btnAgregarAdministrador.setPreferredSize(new java.awt.Dimension(200, 50));
        btnAgregarAdministrador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarAdministradorActionPerformed(evt);
            }
        });
        add(btnAgregarAdministrador, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 500, -1, -1));

        btnEliminarAdministrador.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        btnEliminarAdministrador.setText("Borrar");
        btnEliminarAdministrador.setPreferredSize(new java.awt.Dimension(200, 50));
        btnEliminarAdministrador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarAdministradorActionPerformed(evt);
            }
        });
        add(btnEliminarAdministrador, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 560, -1, -1));

        textConsultarAdministrador.setMaximumSize(new java.awt.Dimension(200, 50));
        textConsultarAdministrador.setMinimumSize(new java.awt.Dimension(200, 50));
        textConsultarAdministrador.setPreferredSize(new java.awt.Dimension(200, 50));
        add(textConsultarAdministrador, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 670, -1, -1));

        toggleBtnConsultarAdmistrador.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        toggleBtnConsultarAdmistrador.setText("Consultar ID");
        toggleBtnConsultarAdmistrador.setPreferredSize(new java.awt.Dimension(200, 50));
        toggleBtnConsultarAdmistrador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleBtnConsultarAdmistradorActionPerformed(evt);
            }
        });
        add(toggleBtnConsultarAdmistrador, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 730, -1, -1));

        jSeparator1.setBackground(new java.awt.Color(255, 0, 51));
        jSeparator1.setForeground(new java.awt.Color(255, 0, 0));
        add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 440, 220, 10));

        tablaAdministradores.setFont(new java.awt.Font("OCR A Extended", 0, 12)); // NOI18N
        tablaAdministradores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Permisos", "Nombre", "1ºApellido", "2ºApellido", "Domicilio", "Movil", "Usuario alias"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaAdministradores.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tablaAdministradores);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(232, 450, 1260, 340));

        fondoDePantalla.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/minimalist_books_image_1500x900.png"))); // NOI18N
        fondoDePantalla.setMaximumSize(new java.awt.Dimension(1500, 800));
        fondoDePantalla.setMinimumSize(new java.awt.Dimension(1500, 800));
        fondoDePantalla.setPreferredSize(new java.awt.Dimension(1500, 800));
        add(fondoDePantalla, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarUsuarioActionPerformed
        String deleteQuery = "DELETE FROM usuarios WHERE id = ?";
        String refreshQuery = "SELECT * FROM usuarios";
        Utility.eliminarElementoSeleccionado(tablaUsuarios, "Usuario", deleteQuery, refreshQuery);
        Utility.registrarAccion("auditoria_administradores", "El administrador eliminó un usuario del sistema.", adminId);
    }//GEN-LAST:event_btnEliminarUsuarioActionPerformed

    private void btnAgregarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarUsuarioActionPerformed
        Utility.mostrarPanelAgregarUsuario();
        Utility.refrescarTabla(tablaUsuarios, "SELECT * FROM usuarios");
        Utility.registrarAccion("auditoria_administradores", "El administrador agregó un nuevo usuario al sistema.", adminId);
    }//GEN-LAST:event_btnAgregarUsuarioActionPerformed

    private void btnAgregarAdministradorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarAdministradorActionPerformed
        Utility.mostrarPanelAgregarAdministrador();
        Utility.refrescarTabla(tablaAdministradores, "SELECT * FROM administradores");
        Utility.registrarAccion("auditoria_administradores", "El administrador agregó un nuevo administrador al sistema.", adminId);
    }//GEN-LAST:event_btnAgregarAdministradorActionPerformed

    private void btnEliminarAdministradorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarAdministradorActionPerformed
        String deleteQuery = "DELETE FROM administradores WHERE id = ?";
        String refreshQuery = "SELECT * FROM administradores";
        Utility.eliminarElementoSeleccionado(tablaAdministradores, "Administrador", deleteQuery, refreshQuery);
        Utility.registrarAccion("auditoria_administradores", "El administrador eliminó otro administrador del sistema.", adminId);
    }//GEN-LAST:event_btnEliminarAdministradorActionPerformed

    private void toggleBtnConsultarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleBtnConsultarUsuarioActionPerformed
    // Verifica si el JToggleButton está seleccionado (para realizar la búsqueda) o no (para mostrar todo)
    if (toggleBtnConsultarUsuario.isSelected()) {
        // Obtener el ID ingresado
        String idTexto = textConsultarUsuario.getText().trim();
        
        // Verificar si se ingresó un ID válido
        if (idTexto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID para buscar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            toggleBtnConsultarUsuario.setSelected(false); // Desactivar el botón si no hay ID
            return;
        }
        
        try {
            int id = Integer.parseInt(idTexto); // Convertir el ID a entero
            
            // Consulta SQL para buscar usuario por ID
            String query = "SELECT * FROM usuarios WHERE id = ?";
            
            try (Connection connection = DatabaseConnection.getConnection();
                 PreparedStatement statement = connection.prepareStatement(query)) {
                 
                statement.setInt(1, id); // Establecer el parámetro ID
                
                try (ResultSet resultSet = statement.executeQuery()) {
                    DefaultTableModel model = (DefaultTableModel) tablaUsuarios.getModel();
                    model.setRowCount(0); // Limpiar la tabla antes de mostrar los resultados de la búsqueda
                    
                    if (resultSet.next()) {
                        int columnCount = resultSet.getMetaData().getColumnCount();
                        Object[] rowData = new Object[columnCount];
                        for (int i = 0; i < columnCount; i++) {
                            rowData[i] = resultSet.getObject(i + 1);
                        }
                        model.addRow(rowData); // Agregar la fila con el resultado a la tabla
                    } else {
                        JOptionPane.showMessageDialog(this, "No se encontró un usuario con el ID especificado.", "Resultado de la búsqueda", JOptionPane.INFORMATION_MESSAGE);
                        toggleBtnConsultarUsuario.setSelected(false); // Desactivar el botón si no se encuentra nada
                    }
                }
                
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al consultar el usuario.", "Error", JOptionPane.ERROR_MESSAGE);
                toggleBtnConsultarUsuario.setSelected(false); // Desactivar el botón en caso de error
            }
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El ID debe ser un número entero.", "Error de Entrada", JOptionPane.ERROR_MESSAGE);
            toggleBtnConsultarUsuario.setSelected(false); // Desactivar el botón si el ID no es válido
        }
        
    } else {
        // Mostrar todos los usuarios cuando el JToggleButton está desactivado
        Utility.refrescarTabla(tablaUsuarios, "SELECT * FROM usuarios");
    }
    }//GEN-LAST:event_toggleBtnConsultarUsuarioActionPerformed

    private void toggleBtnConsultarAdmistradorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleBtnConsultarAdmistradorActionPerformed
        // Verifica si el JToggleButton está seleccionado (para realizar la búsqueda) o no (para mostrar todo)
    if (toggleBtnConsultarAdmistrador.isSelected()) {
        // Obtener el ID ingresado
        String idTexto = textConsultarAdministrador.getText().trim();
        
        // Verificar si se ingresó un ID válido
        if (idTexto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID para buscar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            toggleBtnConsultarAdmistrador.setSelected(false); // Desactivar el botón si no hay ID
            return;
        }
        
        try {
            int id = Integer.parseInt(idTexto); // Convertir el ID a entero
            
            // Consulta SQL para buscar administrador por ID
            String query = "SELECT * FROM administradores WHERE id = ?";
            
            try (Connection connection = DatabaseConnection.getConnection();
                 PreparedStatement statement = connection.prepareStatement(query)) {
                 
                statement.setInt(1, id); // Establecer el parámetro ID
                
                try (ResultSet resultSet = statement.executeQuery()) {
                    DefaultTableModel model = (DefaultTableModel) tablaAdministradores.getModel();
                    model.setRowCount(0); // Limpiar la tabla antes de mostrar los resultados de la búsqueda
                    
                    if (resultSet.next()) {
                        int columnCount = resultSet.getMetaData().getColumnCount();
                        Object[] rowData = new Object[columnCount];
                        for (int i = 0; i < columnCount; i++) {
                            rowData[i] = resultSet.getObject(i + 1);
                        }
                        model.addRow(rowData); // Agregar la fila con el resultado a la tabla
                    } else {
                        JOptionPane.showMessageDialog(this, "No se encontró un administrador con el ID especificado.", "Resultado de la búsqueda", JOptionPane.INFORMATION_MESSAGE);
                        toggleBtnConsultarAdmistrador.setSelected(false); // Desactivar el botón si no se encuentra nada
                    }
                }
                
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al consultar el administrador.", "Error", JOptionPane.ERROR_MESSAGE);
                toggleBtnConsultarAdmistrador.setSelected(false); // Desactivar el botón en caso de error
            }
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El ID debe ser un número entero.", "Error de Entrada", JOptionPane.ERROR_MESSAGE);
            toggleBtnConsultarAdmistrador.setSelected(false); // Desactivar el botón si el ID no es válido
        }
        
    } else {
        // Mostrar todos los administradores cuando el JToggleButton está desactivado
        Utility.refrescarTabla(tablaAdministradores, "SELECT * FROM administradores");
    }
    }//GEN-LAST:event_toggleBtnConsultarAdmistradorActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarAdministrador;
    private javax.swing.JButton btnAgregarUsuario;
    private javax.swing.JButton btnEliminarAdministrador;
    private javax.swing.JButton btnEliminarUsuario;
    private javax.swing.JLabel fondoDePantalla;
    private javax.swing.JLabel infoAdministrador;
    private javax.swing.JLabel infoUsuarios;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tablaAdministradores;
    private javax.swing.JTable tablaUsuarios;
    private javax.swing.JTextField textConsultarAdministrador;
    private javax.swing.JTextField textConsultarUsuario;
    private javax.swing.JToggleButton toggleBtnConsultarAdmistrador;
    private javax.swing.JToggleButton toggleBtnConsultarUsuario;
    // End of variables declaration//GEN-END:variables
}
